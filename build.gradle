buildscript {
  ext.pegasusVersion = '28.3.7'
  ext.junitJupiterVersion = '5.6.1'

  apply from: './repositories.gradle'
  buildscript.repositories.addAll(project.repositories)
  dependencies {
    classpath 'com.commercehub.gradle.plugin:gradle-avro-plugin:0.8.1'
    classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.6.1'
    classpath 'com.github.node-gradle:gradle-node-plugin:2.2.4'
    classpath 'com.linkedin.pegasus:gradle-plugins:' + pegasusVersion
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    classpath "org.shipkit:shipkit-auto-version:0.0.48"
    classpath "org.shipkit:shipkit-changelog:0.0.45"
  }
}

project.ext.spec = [
    'product' : [
        'pegasus' : [
            'd2' : 'com.linkedin.pegasus:d2:' + pegasusVersion,
            'data' : 'com.linkedin.pegasus:data:' + pegasusVersion,
            'dataAvro1_6' : 'com.linkedin.pegasus:data-avro-1_6:' + pegasusVersion,
            'generator': 'com.linkedin.pegasus:generator:' + pegasusVersion,
            'restliCommon' : 'com.linkedin.pegasus:restli-common:' + pegasusVersion,
            'restliClient' : 'com.linkedin.pegasus:restli-client:' + pegasusVersion,
            'restliServer' : 'com.linkedin.pegasus:restli-server:' + pegasusVersion,
            'restliSpringBridge': 'com.linkedin.pegasus:restli-spring-bridge:' + pegasusVersion,
        ]
    ]
]

project.ext.externalDependency = [
    'assertJ': 'org.assertj:assertj-core:3.11.1',
    'commonsIo': 'commons-io:commons-io:2.4',
    'commonsLang': 'commons-lang:commons-lang:2.6',
    'ebean': 'io.ebean:ebean:11.33.3',
    'ebeanAgent': 'io.ebean:ebean-agent:11.27.1',
    'elasticSearchRest': 'org.elasticsearch.client:elasticsearch-rest-high-level-client:5.6.8',
    'elasticSearchTransport': 'org.elasticsearch.client:transport:5.6.8',
    'elasticSearchRest7': 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.9.3',
    'elasticSearchTransport7': 'org.elasticsearch.client:transport:7.9.3',
    'guava': 'com.google.guava:guava:27.0.1-jre',
    'h2': 'com.h2database:h2:1.4.196',
    'jacksonCore': 'com.fasterxml.jackson.core:jackson-core:2.9.7',
    'jacksonDataBind': 'com.fasterxml.jackson.core:jackson-databind:2.9.7',
    'javatuples': 'org.javatuples:javatuples:1.2',
    'jsonSimple': 'com.googlecode.json-simple:json-simple:1.1.1',
    'junitJupiterApi': "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion",
    'junitJupiterParams': "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion",
    'junitJupiterEngine': "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion",
    'lombok': 'org.projectlombok:lombok:1.18.12',
    'mockito': 'org.mockito:mockito-core:3.0.0',
    'mockitoInline': 'org.mockito:mockito-inline:3.0.0',
    'neo4jHarness': 'org.neo4j.test:neo4j-harness:3.4.11',
    'neo4jJavaDriver': 'org.neo4j.driver:neo4j-java-driver:4.0.0',
    'parseqTest': 'com.linkedin.parseq:parseq:3.0.7:test',
    'postgresql': 'org.postgresql:postgresql:42.2.14',
    'reflections': 'org.reflections:reflections:0.9.11',
    'testContainers': 'org.testcontainers:testcontainers:1.14.3',
    'testContainersJunit': 'org.testcontainers:junit-jupiter:1.14.3',
    'testng': 'org.testng:testng:6.9.9'
]

apply plugin: 'com.diffplug.spotless'
apply from: "./gradle/release.gradle"

// TODO expand this to all projects and then delete this allow list. This list is letting us fix errors over time rather
// than in one big change.
def wErrorProjects = [
    project(':core-models'),
    project(':dao-api'),
    // project(':dao-impl:ebean-dao'),
    // project(':dao-impl:elasticsearch-dao'),
    // project(':dao-impl:neo4j-dao'),
    // project(':restli-resources'),
    project(':testing'),
    project(':validators')
]

allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'

  gradle.projectsEvaluated {
    if (wErrorProjects.contains(project)) {
      tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all" << "-Werror" <<
            "-Xlint:-deprecation" << // TODO
            "-Xlint:-processing" << // TODO we have annotations like @Nonnull that need a processor
            "-Xlint:-serial" // I don't think we care about having custom Exception subclasses be serializable...
      }
    }
  }
}

subprojects { sp ->
  apply plugin: 'maven'

  plugins.withType(JavaPlugin) {
    dependencies {
      testCompile externalDependency.testng
    }

    tasks.withType(Test) {
      useTestNG()
    }

    checkstyle {
      configDirectory = file("${project.rootDir}/gradle/checkstyle")
      sourceSets = [ getProject().sourceSets.main, getProject().sourceSets.test ]
      toolVersion = "8.35"
      maxWarnings = 0
      ignoreFailures = false
    }
  }

  afterEvaluate {
    if (project.plugins.hasPlugin('java')) {
      sourceCompatibility = 1.8
      targetCompatibility = 1.8
    }
  }

  afterEvaluate {
    if (project.plugins.hasPlugin('pegasus')) {
      dependencies {
        dataTemplateCompile spec.product.pegasus.data
        restClientCompile spec.product.pegasus.restliClient
      }
    }
  }
}

spotless {
  format 'md', {
    target '**/*.md'
    targetExclude '.github/**' // GitHub renders these documents differently...
    prettier().config([printWidth: 120, proseWrap: 'always'])
  }
}
