assert plugins.hasPlugin(JavaPlugin)

if (project.hasProperty('disableShipkit')) {
  return
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

tasks.withType(Jar) {
  from "$rootDir/LICENSE"
  from "$rootDir/NOTICE"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

javadoc {
  // TODO Don't generate javadoc for some PDL Java files for now. https://github.com/linkedin/rest.li/issues/432
  exclude 'com/linkedin/metadata/query/**'

  // We don't care about missing warnings; we're fine with no @return or missing @param if they don't add value.
  options.addStringOption('Xdoclint:all,-missing', '-quiet')
  options.addStringOption('Xwerror', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar

  if (plugins.hasPlugin('pegasus')) {
    archives mainDataTemplateJar
  }
}

def pomConfig = {
  licenses {
    license {
      name = 'The Apache License, Version 2.0'
      url = 'https://github.com/linkedin/datahub-gma/blob/master/LICENSE'
      distribution = 'repo'
    }
  }
  scm {
    url = 'https://github.com/linkedin/datahub-gma.git'
  }
  issueManagement {
    url = 'https://github.com/linkedin/datahub-gma/issues'
    system = 'GitHub issues'
  }
}

publishing {
  publications {
    if (!project.ext.has('publications') || project.ext.publications.contains('jar')) {
      jar(MavenPublication) {
        from components.java

        artifact javadocJar
        artifact sourcesJar

        pom pomConfig
      }
    }

    if (plugins.hasPlugin('pegasus') &&
        (!project.ext.has('publications') || project.ext.publications.contains('dataTemplate'))) {
      dataTemplate(MavenPublication) {
        artifact mainDataTemplateJar
        artifactId "$project.name-data-template"

        pom pomConfig
      }
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')

  publish = true

  dryRun = project.hasProperty("bintray.dryRun") //useful for testing

  if (project.ext.has('publications')) {
    publications = project.ext.publications
  } else {
    publications = ['jar']

    if (plugins.hasPlugin('pegasus')) {
      publications += 'dataTemplate'
    }
  }

  pkg {
    repo = 'maven'
    userOrg = 'linkedin'
    name = 'datahub-gma'

    licenses = ['Apache-2.0']
    labels = ['metadata', 'datahub', 'gma']
    version {
      // disable gpg signing to speed up publishing
      gpg {
        sign = false
      }
      // disable upload to maven central
      mavenCentralSync {
        sync = false
      }
    }
  }
}

bintrayUpload {
  // Bintray normally doesn't depend on POM generation, but we need it.
  tasks.withType(GenerateMavenPom) {
    bintrayUpload.dependsOn it
  }

  doFirst {
    println "Publishing $jar.baseName to Bintray (dryRun: $dryRun, repo: $repoName, publish: $publish)"
  }
}
