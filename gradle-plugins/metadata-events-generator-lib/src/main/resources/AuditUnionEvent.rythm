@import com.linkedin.metadata.generator.AspectUnionEventSpec;
@import com.linkedin.metadata.generator.SchemaGeneratorUtil;
@args AspectUnionEventSpec eventSpec
namespace @(eventSpec.getNamespace())

import com.linkedin.avro2pegasus.events.KafkaAuditHeader
import com.linkedin.common.AuditStamp
import com.linkedin.metadata.events.IngestionTrackingContext
import com.linkedin.metadata.events.IngestionMode
import com.linkedin.metadata.events.ChangeType
import @eventSpec.getUrnType()
@for (String valueType: eventSpec.getValueTypes()) {
import @valueType
}

/**
 * MetadataAuditEvent for aspects of @(eventSpec.getShortUrn()).
 */
@@MetadataAuditEvent
record MAE@(eventSpec.getShortTyperefName()) {
  /**
   * Kafka audit header for the MetadataAuditEvent.
   */
  auditHeader: optional KafkaAuditHeader

  /**
   * @(eventSpec.getShortUrn()) as the key for the MetadataAuditEvent.
   */
  urn: @(eventSpec.getShortUrn())

  /**
   * Tracking context to identify the lifecycle of the trackable ingestion item.
   */
  ingestionTrackingContext: optional union[null, IngestionTrackingContext] = null

  /**
   * Audit info (i.e. createdon, createdby, createdfor) to track the version history of metadata changes.
   */
  auditStamp: union[null, AuditStamp] = null

  /**
   * Type of the ingestion. Allow null for backward compatibility. Downstream should treat null as live ingestion.
   */
  ingestionMode: optional union[null, IngestionMode] = null

  @for (String valueType: eventSpec.getValueTypes()) {
  /**
   * Audit record for aspect @(SchemaGeneratorUtil.stripNamespace(valueType)).
   */
  diff@(SchemaGeneratorUtil.stripNamespace(valueType)): optional record @(SchemaGeneratorUtil.stripNamespace(valueType))Audit {
    oldValue: optional @(SchemaGeneratorUtil.stripNamespace(valueType))
    newValue: optional @(SchemaGeneratorUtil.stripNamespace(valueType))
    changeType: optional union[null, ChangeType] = null
  }

  }
}