@import com.linkedin.metadata.generator.SingleAspectEventSpec;
@import com.linkedin.metadata.generator.SchemaGeneratorUtil;
@args SingleAspectEventSpec eventSpec
namespace @(eventSpec.getNamespace())

import com.linkedin.avro2pegasus.events.KafkaAuditHeader
import com.linkedin.common.AuditStamp
import com.linkedin.metadata.events.ChangeType
import com.linkedin.metadata.events.IngestionTrackingContext
import com.linkedin.metadata.events.IngestionMode
import @eventSpec.getUrnType()
import @eventSpec.getFullValueType()

/**
 * MetadataAuditEvent for the @(eventSpec.getShortUrn()) with @(eventSpec.getShortValueType()) aspect.
 */
@@MetadataAuditEvent
record MetadataAuditEvent {

  /**
   * Kafka audit header for the MetadataAuditEvent.
   */
  auditHeader: optional KafkaAuditHeader

  /**
   * @(eventSpec.getShortUrn()) as the key for the MetadataAuditEvent.
   */
  urn: @(eventSpec.getShortUrn())

  /**
   * Aspect of the @eventSpec.getShortValueType() before the update.
   */
  oldValue: optional @eventSpec.getShortValueType()

  /**
   * Aspect of the @eventSpec.getShortValueType() after the update.
   */
  newValue: @eventSpec.getShortValueType()

  /**
   * Change type.
   */
  changeType: optional union[null, ChangeType] = null

  /**
   * Tracking context to identify the lifecycle of the trackable ingestion item.
   */
  ingestionTrackingContext: optional union[null, IngestionTrackingContext] = null

  /**
   * Audit info (i.e. createdon, createdby, createdfor) to track the version history of metadata changes.
   */
  auditStamp: union[null, AuditStamp] = null

  /**
   * Type of the ingestion. Allow null for backward compatibility. Downstream should treat null as live ingestion.
   */
  ingestionMode: optional union[null, IngestionMode] = null
}